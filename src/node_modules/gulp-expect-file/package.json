{
  "name": "gulp-expect-file",
  "version": "0.0.7",
  "author": {
    "name": "Kota Saito",
    "email": "kotas.nico@gmail.com"
  },
  "copyright": "2014 Kota Saito",
  "description": "Expect files in pipes for gulp.js",
  "license": "MIT",
  "homepage": "https://github.com/kotas/gulp-expect-file/",
  "bugs": {
    "url": "https://github.com/kotas/gulp-expect-file/issues"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/kotas/gulp-expect-file.git"
  },
  "main": "index.js",
  "scripts": {
    "test": "mocha"
  },
  "keywords": [
    "gulpplugin",
    "test",
    "expect"
  ],
  "dependencies": {
    "through2": "^1.0.0",
    "gulp-util": "^2.2.16",
    "async": "^0.9.0",
    "minimatch": "^0.3.0",
    "xtend": "^3.0.0"
  },
  "devDependencies": {
    "mocha": "^1.20.1",
    "should": "^3.3.2",
    "temp": "^0.7.0",
    "event-stream": "^3.1.5"
  },
  "readme": "# gulp-expect-file [![NPM version][npm-image]][npm-url] [![Build Status][travis-image]][travis-url] [![Dependency Status][daviddm-image]][daviddm-url]\n> Expectation on generated files for gulp 3\n\nThis plugin is intended for testing other gulp plugin.\n\n![Screen Shot](http://kotas.github.io/gulp-expect-file/screenshot.png)\n\n## Usage\n\nFirst, install `gulp-expect-file` as a development dependency:\n\n```shell\nnpm install --save-dev gulp-expect-file\n```\n\nThen, add it to your `gulpfile.js`:\n\n```js\nvar expect = require('gulp-expect-file');\n\ngulp.task('copy', function(){\n  gulp.src(['src/foo.txt'])\n    .pipe(gulp.dest('dest/'))\n    .pipe(expect('dest/foo.txt'))\n});\n```\n\n## API\n\n### expect(expectation)\n\n#### expectation\nType: `String`, `Array`, `Object` or `Function`\n\nIt describes the expectation of files on pipe.\n\n| expectation | meaning |\n| ----------- | ------- |\n| `\"foo.txt\"` | Expects `foo.txt` on pipe |\n| `\"*.txt\"`   | Expects any files matching glob `*.txt` on pipe |\n| `[\"a.txt\", \"b.txt\"]` | Expects `a.txt` and `b.txt` both on pipe |\n| `{\"a.txt\": true, \"b.txt\": true}` | Expects `a.txt` and `b.txt` both on pipe (same as above) |\n| `{\"foo.txt\": \"text\"}` | Expects `foo.txt` with contents that has `\"text\"` as substring  |\n| `{\"foo.txt\": /pattern/}` | Expects `foo.txt` with contents that matches `/pattern/` |\n| `function (file) { ... }` | Call the tester function for each file on pipe |\n| `{\"foo.txt\": function (file) { ... }}` | Call the tester function for `foo.txt` |\n\nA tester function is called with [vinyl File object](https://github.com/wearefractal/vinyl) of target file.\n\nIt can return `true`, `null`, `undefined` for passing that file. `false`, `String` of error message, or any other value will fail testing on that file.\n\nSync version:\n```js\nfunction (file) {\n  return /\\.txt$/.test(file.path);\n}\n```\n\nAsync version:\n```js\nfunction (file, callback) {\n  process.nextTick(function () {\n    if (/\\.txt$/.test(file.path)) {\n      callback('not txt file');\n    } else {\n      callback();\n    }\n  });\n}\n```\n\n### expect(options, expectation)\n\n#### options.reportUnexpected\nType: `Boolean`\nDefault: `true`\n\nIf true, files not matching any expectation will be reported as failure.\n\nFor example, if `a.txt` and `b.txt` are on the pipe, `expect(['a.txt'])` will report that `b.txt` is unexpected.\n\n```js\ngulp.src(['a.txt', 'b.txt'])\n  .pipe(expect(['a.txt']))\n\n// => FAIL: b.txt unexpected\n```\n\n#### options.reportMissing\nType: `Boolean`\nDefault: `true`\n\nIf true, expected files that are not on the pipe will be reported as failure.\n\nFor example, if `a.txt` is on the pipe, `expect(['a.txt', 'b.txt'])` will report that `b.txt` is missing.\n\n```js\ngulp.src(['a.txt'])\n  .pipe(expect(['a.txt', 'b.txt']))\n\n// => FAIL: Missing 1 expected files: b.txt\n```\n\n#### options.checkRealFile\nType: `Boolean`\nDefault: `false`\n\nIf true, it also checks if the real file exists on the file system by `fs.exists()`.\n\n```js\ngulp.src(['exist.txt', 'nonexist.txt'])\n  .pipe(expect({ checkRealFile: true }, '*.txt'))\n\n// => FAIL: nonexist.txt not exists on filesystem\n```\n\n#### options.errorOnFailure\nType: `Boolean`\nDefault: `false`\n\nIf true, it emits `error` event when expectations got failed.\n\n```js\ngulp.src(['a.txt'])\n  .pipe(expect({ errorOnFailure: true }, ['b.txt']))\n    .on('error', function (err) { console.error(err); })\n```\n\n#### options.silent\nType: `Boolean`\nDefault: `false`\n\nIf true, it does not report any results.\n\n#### options.verbose\nType: `Boolean`\nDefault: `false`\n\nIf true, it reports files that passed the expectation.\n\n### expect.real([options,] expectation)\n\nThis is just a shortcut for `expect({ checkRealFile: true }, expectation)`.\n\n\n[npm-url]: https://npmjs.org/package/gulp-expect-file\n[npm-image]: https://badge.fury.io/js/gulp-expect-file.png\n[travis-url]: https://travis-ci.org/kotas/gulp-expect-file\n[travis-image]: https://travis-ci.org/kotas/gulp-expect-file.png?branch=master\n[daviddm-url]: https://david-dm.org/kotas/gulp-expect-file\n[daviddm-image]: https://david-dm.org/kotas/gulp-expect-file.png?theme=shields.io\n",
  "readmeFilename": "README.md",
  "_id": "gulp-expect-file@0.0.7",
  "dist": {
    "shasum": "82974e45db8af81fb04bc640b13a5622790e5180"
  },
  "_from": "gulp-expect-file@0.0.7",
  "_resolved": "https://registry.npmjs.org/gulp-expect-file/-/gulp-expect-file-0.0.7.tgz"
}
